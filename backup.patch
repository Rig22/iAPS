diff --git a/Dependencies/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv1Explaination.swift b/Dependencies/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv1Explaination.swift
index 24c1c8681..5f99563e7 100644
--- a/Dependencies/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv1Explaination.swift
+++ b/Dependencies/DanaKit/DanaKitUI/Views/Onboarding/DanaRSv1Explaination.swift
@@ -36,7 +36,7 @@ struct DanaRSv1Explaination: View {
                     }
                     .padding(.vertical, 10)
                     
-                    Text(String(format: LocalizedString("During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, %1$@ is ready to communicate with your DanaRS v1", comment: "Subtext for danars v1 (1: appName)"), appName))
+                    Text(String(format: LocalizedString("During the pairing process, your DanaRS v1 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, %1$@ is ready to communicate with your DanaRS v1", comment: "Subtext for danars v1 (1: appName)"), appName))
                     
                     Spacer()
                 }
diff --git a/Dependencies/DanaKit/Localization/en.lproj/Localizable.strings b/Dependencies/DanaKit/Localization/en.lproj/Localizable.strings
index 1958ab4a2..9fd73ed78 100644
--- a/Dependencies/DanaKit/Localization/en.lproj/Localizable.strings
+++ b/Dependencies/DanaKit/Localization/en.lproj/Localizable.strings
@@ -23,7 +23,7 @@
 "Setting up DanaRS v1" = "Setting up DanaRS v1";
 
 /* Subtext for danars v1 */
-"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1" = "During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, Loop is ready to communicate with your DanaRS v1";
+"During the pairing process, your DanaRS v1 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, %1$@ is ready to communicate with your DanaRS v1" = "During the pairing process, your DanaRS v1 will show a pairing prompt while you iPhone will show a prompt for a pairing code. On your pump, select OK and type the code on your iPhone. After that, %1$@ is ready to communicate with your DanaRS v1";
 
 /* check password text for danars v1 */
 "Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it" = "Before starting with the pairing process, it is recommended to check, and if needed update, the pump password. You can do this by going to the pump settings -> user settings -> password. The default password is 1234, if this is your password, please consider changing it";
@@ -38,7 +38,7 @@
 "Setting up DanaRS v3" = "Setting up DanaRS v3";
 
 /* Subtext for danars v3 */
-"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3" = "During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, Loop is ready to communicate with your DanaRS v3";
+"During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, %1$@ is ready to communicate with your DanaRS v3" = "During the pairing process, your DanaRS v3 will show a pairing prompt while you iPhone will show a prompt for two pairing codes. On your pump, select OK and type the two codes on your iPhone. After that, %1$@ is ready to communicate with your DanaRS v3";
 
 /* Title for dana-i explaination */
 "Setting up Dana-i" = "Setting up Dana-i";
@@ -304,7 +304,7 @@
 "sec" = "sec";
 
 /* backlightOnTimeInSec */
-"Backlight on time" = "Verlichting aan tijd";
+"Backlight on time" = "Backlight on time";
 
 /* lcdOnTimeInSec */
 "Lcd on time" = "Lcd on time";
@@ -414,7 +414,6 @@
 /* Description for basal profile number */
 "Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@" = "Set the basal profile the pump should use. Note, that it will overwrite the profile that is in the pump, with the one in %1$@";
 
-
 /* Error message for reservoir view when reservoir empty
    Status highlight message for emptyReservoir alarm.
    Status highlight that a pump is out of insulin. */
diff --git a/FreeAPS/Sources/APS/APSManager.swift b/FreeAPS/Sources/APS/APSManager.swift
index 5bccab2f1..d543ad2ea 100644
--- a/FreeAPS/Sources/APS/APSManager.swift
+++ b/FreeAPS/Sources/APS/APSManager.swift
@@ -377,11 +377,13 @@ final class BaseAPSManager: APSManager, Injectable {
 
         let now = Date()
         let temp = currentTemp(date: now)
+        let temporary = temporaryData
+        temporaryData.forBolusView.carbs = 0
 
         let mainPublisher = makeProfiles()
             .flatMap { _ in self.autosens() }
             .flatMap { _ in self.dailyAutotune() }
-            .flatMap { _ in self.openAPS.determineBasal(currentTemp: temp, clock: now, temporary: self.temporaryData) }
+            .flatMap { _ in self.openAPS.determineBasal(currentTemp: temp, clock: now, temporary: temporary) }
             .map { suggestion -> Bool in
                 if let suggestion = suggestion {
                     DispatchQueue.main.async {
diff --git a/FreeAPS/Sources/Models/FreeAPSSettings.swift b/FreeAPS/Sources/Models/FreeAPSSettings.swift
index 948c6f15e..dd7223353 100644
--- a/FreeAPS/Sources/Models/FreeAPSSettings.swift
+++ b/FreeAPS/Sources/Models/FreeAPSSettings.swift
@@ -89,13 +89,13 @@ struct FreeAPSSettings: JSON, Equatable, Codable {
     var danaBar: Bool = false
     var legendsSwitch: Bool = false
     var tempTargetbar: Bool = false
-    var backgroundColorOptionRawValue: String = BackgroundColorOption.darkBlue.rawValue
+    var backgroundColorOptionRawValue: String = BackgroundColorOption.navajoWhite4.rawValue
     var danaBarViewOption: String = "view1"
     var insulinAgeOption: String = "Drei_Tage"
     var cannulaAgeOption: String = "Drei_Tage"
-    var loopViewOption: String = LoopViewOption.view2.rawValue
+    var loopViewOption: String = LoopViewOption.view1.rawValue
     var chartBackgroundColored: Bool = false
-    var carbInsulinLoopViewOption: Bool = true
+    var carbInsulinLoopViewOption: Bool = false
     var barViewOptionConfigurationRawValue: String = BarViewOptionConfiguration.none.rawValue
     var topBarActive: Bool = false
     var danaBarActive: Bool = false
diff --git a/FreeAPS/Sources/Modules/Bolus/BolusStateModel.swift b/FreeAPS/Sources/Modules/Bolus/BolusStateModel.swift
index 19c8ab97a..ca4fdfa8f 100644
--- a/FreeAPS/Sources/Modules/Bolus/BolusStateModel.swift
+++ b/FreeAPS/Sources/Modules/Bolus/BolusStateModel.swift
@@ -241,7 +241,6 @@ extension Bolus {
         func add() {
             guard amount > 0 else {
                 showModal(for: nil)
-                save()
                 return
             }
 
diff --git a/FreeAPS/Sources/Modules/Bolus/View/AlternativeBolusCalcRootView.swift b/FreeAPS/Sources/Modules/Bolus/View/AlternativeBolusCalcRootView.swift
index 5f81ca2bd..acb988d58 100644
--- a/FreeAPS/Sources/Modules/Bolus/View/AlternativeBolusCalcRootView.swift
+++ b/FreeAPS/Sources/Modules/Bolus/View/AlternativeBolusCalcRootView.swift
@@ -224,6 +224,7 @@ extension Bolus {
                     }
                 }
             }
+            .interactiveDismissDisabled()
             .compactSectionSpacing()
             .alert(isPresented: $isRemoteBolusAlertPresented) {
                 remoteBolusAlert!
diff --git a/FreeAPS/Sources/Modules/Bolus/View/DefaultBolusCalcRootView.swift b/FreeAPS/Sources/Modules/Bolus/View/DefaultBolusCalcRootView.swift
index d87f58778..48110f945 100644
--- a/FreeAPS/Sources/Modules/Bolus/View/DefaultBolusCalcRootView.swift
+++ b/FreeAPS/Sources/Modules/Bolus/View/DefaultBolusCalcRootView.swift
@@ -193,6 +193,7 @@ extension Bolus {
                     }
                 }
             }
+            .interactiveDismissDisabled()
             .compactSectionSpacing()
             .dynamicTypeSize(...DynamicTypeSize.xxLarge)
             .onAppear {
diff --git a/FreeAPS/Sources/Modules/Home/HomeStateModel.swift b/FreeAPS/Sources/Modules/Home/HomeStateModel.swift
index 8d5f5e8e2..3ee8a07e4 100644
--- a/FreeAPS/Sources/Modules/Home/HomeStateModel.swift
+++ b/FreeAPS/Sources/Modules/Home/HomeStateModel.swift
@@ -86,12 +86,12 @@ extension Home {
         @Published var legendsSwitch: Bool = false
         @Published var tempTargetbar: Bool = false
         @Published var timeSettings: Bool = false
-        @Published var backgroundColorOptionRawValue: String = BackgroundColorOption.darkBlue.rawValue
+        @Published var backgroundColorOptionRawValue: String = BackgroundColorOption.navajoWhite4.rawValue
         @Published var danaBarViewOption: String = "view1"
-        @Published var loopViewOption: String = LoopViewOption.view2.rawValue
+        @Published var loopViewOption: String = LoopViewOption.view1.rawValue
         @Published var chartBackgroundColored: Bool = false
-        @Published var carbInsulinLoopViewOption: Bool = true
-        @Published var button3D: Bool = true
+        @Published var carbInsulinLoopViewOption: Bool = false
+        @Published var button3D: Bool = false
         @Published var sensorAgeDays: String = "Fuenfzehn_Tage"
         @Published var sensorStartTime: Date?
         @Published var remainingSensorDays: Int = 0
@@ -740,6 +740,30 @@ extension Home.StateModel:
         setupData()
     }
 
+    private func updateRemainingSensorDays() {
+        if sensorStartTime == nil {
+            sensorStartTime = Date()
+            settingsManager.settings.sensorStartTime = sensorStartTime
+        }
+
+        if let startTime = sensorStartTime {
+            let elapsedDays = Calendar.current.dateComponents([.day], from: startTime, to: Date()).day ?? 0
+
+            if let sensorAge = SensorAgeDays(rawValue: sensorAgeDays) {
+                let totalDays = sensorAge.asInt()
+                remainingSensorDays = max(0, totalDays - elapsedDays)
+            } else {
+                remainingSensorDays = 0
+            }
+        } else {
+            if let sensorAge = SensorAgeDays(rawValue: sensorAgeDays) {
+                remainingSensorDays = sensorAge.asInt()
+            } else {
+                remainingSensorDays = 0
+            }
+        }
+    }
+
     func settingsDidChange(_ settings: FreeAPSSettings) {
         allowManualTemp = !settings.closedLoop
         uploadStats = settingsManager.settings.uploadStats
@@ -791,31 +815,8 @@ extension Home.StateModel:
         button3D = settingsManager.settings.button3D
         sensorAgeDays = settingsManager.settings.sensorAgeDays
         sensorStartTime = settingsManager.settings.sensorStartTime
-
-        // Falls keine Startzeit gesetzt ist, verwende das aktuelle Datum
-        if sensorStartTime == nil {
-            sensorStartTime = Date()
-            settingsManager.settings.sensorStartTime = sensorStartTime
-        }
-
-        // Berechne die verbleibenden Sensor-Tage
-        if let startTime = sensorStartTime {
-            let elapsedDays = Calendar.current.dateComponents([.day], from: startTime, to: Date()).day ?? 0
-
-            if let sensorAge = SensorAgeDays(rawValue: sensorAgeDays) {
-                let totalDays = sensorAge.asInt() // Sensorlaufzeit in Tagen
-                remainingSensorDays = max(0, totalDays - elapsedDays)
-            } else {
-                remainingSensorDays = 0 // Fallback, falls kein gültiger Wert gefunden wird
-            }
-        } else {
-            // Falls keine Startzeit vorhanden ist, nutze die Standard-Sensorlaufzeit
-            if let sensorAge = SensorAgeDays(rawValue: sensorAgeDays) {
-                remainingSensorDays = sensorAge.asInt()
-            } else {
-                remainingSensorDays = 0
-            }
-        }
+        updateRemainingSensorDays()
+        // Dana UI Toggels
     }
 
     func pumpHistoryDidUpdate(_: [PumpHistoryEvent]) {
diff --git a/FreeAPS/Sources/Modules/Home/View/BackgroundColorOption.swift b/FreeAPS/Sources/Modules/Home/View/BackgroundColorOption.swift
index 38695dcf9..bf165951d 100644
--- a/FreeAPS/Sources/Modules/Home/View/BackgroundColorOption.swift
+++ b/FreeAPS/Sources/Modules/Home/View/BackgroundColorOption.swift
@@ -13,12 +13,15 @@ enum BackgroundColorOption: String, CaseIterable, Identifiable, Encodable {
     case darkGreen
     case black
     case darkGray
-    case blackBerry
+    case snow4
     case darkRed
+    case indianRed4
+    case sienna3
     case burntOrange
     case autumnLeaf
     case mustard
-    case aubergine
+    case navajoWhite4
+    case goldenRod4
 
     var id: String { rawValue }
 
@@ -36,18 +39,24 @@ enum BackgroundColorOption: String, CaseIterable, Identifiable, Encodable {
             return Color(red: 0.00, green: 0.00, blue: 0.00)
         case .darkGray:
             return Color(red: 0.12, green: 0.14, blue: 0.14)
-        case .blackBerry:
-            return Color(red: 0.23, green: 0.04, blue: 0.14)
+        case .snow4:
+            return Color(red: 0.55, green: 0.55, blue: 0.54)
         case .darkRed:
             return Color(red: 0.25, green: 0.07, blue: 0.10)
+        case .indianRed4:
+            return Color(red: 0.55, green: 0.23, blue: 0.23)
+        case .sienna3:
+            return Color(red: 0.80, green: 0.41, blue: 0.22)
         case .burntOrange:
             return Color(red: 0.45, green: 0.22, blue: 0.12)
         case .autumnLeaf:
             return Color(red: 0.58, green: 0.33, blue: 0.09)
         case .mustard:
             return Color(red: 0.28, green: 0.22, blue: 0.10)
-        case .aubergine:
-            return Color(red: 0.15, green: 0.05, blue: 0.25)
+        case .navajoWhite4:
+            return Color(red: 0.55, green: 0.47, blue: 0.39)
+        case .goldenRod4:
+            return Color(red: 0.55, green: 0.41, blue: 0.08)
         }
     }
 }
diff --git a/FreeAPS/Sources/Modules/Home/View/Header/LoopView.swift b/FreeAPS/Sources/Modules/Home/View/Header/LoopView.swift
index 44224930a..5a1702310 100644
--- a/FreeAPS/Sources/Modules/Home/View/Header/LoopView.swift
+++ b/FreeAPS/Sources/Modules/Home/View/Header/LoopView.swift
@@ -59,20 +59,12 @@ struct FillablePieSegment: View {
     var body: some View {
         VStack {
             ZStack {
-                Circle()
-                    .fill(Color.darkGray.opacity(0.5))
-                    .frame(width: 45, height: 45)
-                    .overlay(
-                        Circle()
-                            .stroke(Color.white, lineWidth: 0)
-                    )
-
                 PieSliceView(
                     startAngle: .degrees(-90),
                     endAngle: .degrees(-90 + Double(pieSegmentViewModel.progress * 360))
                 )
                 .fill(color)
-                .frame(width: 45, height: 45)
+                .frame(width: 50, height: 50)
                 .opacity(0.7)
             }
 
@@ -124,19 +116,15 @@ struct LoopView: View {
                     animateProgress: true
                 )
 
-                Image("Loop")
-                    .resizable()
-                    .scaledToFit()
-                    .frame(width: 48, height: 48)
-
                 Circle()
                     .fill(color)
                     .frame(width: 6, height: 6)
 
                 if isLooping {
                     Circle()
-                        .fill(Color.black.opacity(1.0))
-                        .frame(width: 49, height: 49)
+                        // .fill(Color.rig22Background)
+                        .fill(Color.darkGray.opacity(0.5))
+                        .frame(width: 50, height: 50)
                         .transition(.opacity)
                 }
 
@@ -162,11 +150,17 @@ struct LoopView: View {
                 .fill(
                     AngularGradient(
                         gradient: Gradient(colors: [
-                            Color(red: 0.0, green: 0.8, blue: 0.4), // Helles Grün
-                            Color(red: 0.0, green: 0.6, blue: 0.8), // Übergang zu Blau
-                            Color(red: 0.0, green: 0.4, blue: 1.0), // Blau
-                            Color(red: 0.0, green: 0.6, blue: 0.8), // Übergang zurück zu Grün
-                            Color(red: 0.0, green: 0.8, blue: 0.4) // Helles Grün
+                            Color(red: 0.0, green: 0.8, blue: 0.4).opacity(1.0),
+                            Color(red: 0.0, green: 0.75, blue: 0.5).opacity(1.0),
+                            Color(red: 0.0, green: 0.7, blue: 0.6).opacity(01.0),
+                            Color(red: 0.0, green: 0.6, blue: 0.75).opacity(1.0),
+                            Color(red: 0.0, green: 0.5, blue: 0.85).opacity(1.0),
+                            Color(red: 0.0, green: 0.4, blue: 0.9).opacity(1.0),
+                            Color(red: 0.0, green: 0.5, blue: 0.85).opacity(1.0),
+                            Color(red: 0.0, green: 0.6, blue: 0.75).opacity(1.0),
+                            Color(red: 0.0, green: 0.7, blue: 0.6).opacity(1.0),
+                            Color(red: 0.0, green: 0.75, blue: 0.5).opacity(1.0),
+                            Color(red: 0.0, green: 0.8, blue: 0.4).opacity(1.0)
                         ]),
                         center: .center,
                         angle: .degrees(gradientOffset)
@@ -175,7 +169,7 @@ struct LoopView: View {
                 .frame(width: 50, height: 50)
                 .scaleEffect(scale)
                 .onAppear {
-                    /*  withAnimation(
+                    /* withAnimation(
                          Animation.easeInOut(duration: 1).repeatForever(autoreverses: true)
                      ) {
                          scale = 1.2
diff --git a/FreeAPS/Sources/Modules/Home/View/Header/LoopView2.swift b/FreeAPS/Sources/Modules/Home/View/Header/LoopView2.swift
index 2781bc8bb..aaeb0628b 100644
--- a/FreeAPS/Sources/Modules/Home/View/Header/LoopView2.swift
+++ b/FreeAPS/Sources/Modules/Home/View/Header/LoopView2.swift
@@ -22,7 +22,7 @@ struct LoopView2: View {
         return formatter
     }
 
-    private let rect = CGRect(x: 0, y: 0, width: 45, height: 45)
+    private let rect = CGRect(x: 0, y: 0, width: 46, height: 46)
 
     var body: some View {
         VStack(alignment: .center) {
@@ -103,24 +103,6 @@ struct CircleProgress: View {
     @State private var pulse = false
 
     private let rect = CGRect(x: 0, y: 0, width: 45, height: 45)
-    /*   private var backgroundGradient: AngularGradient {
-         AngularGradient(
-             gradient: Gradient(colors: [
-                 Color(red: 0.262745098, green: 0.7333333333, blue: 0.9137254902),
-                 Color(red: 0.3411764706, green: 0.6666666667, blue: 0.9254901961),
-                 Color(red: 0.4862745098, green: 0.5450980392, blue: 0.9529411765),
-                 Color(red: 0.6235294118, green: 0.4235294118, blue: 0.9803921569),
-                 Color(red: 0.7215686275, green: 0.3411764706, blue: 1),
-                 Color(red: 0.6235294118, green: 0.4235294118, blue: 0.9803921569),
-                 Color(red: 0.4862745098, green: 0.5450980392, blue: 0.9529411765),
-                 Color(red: 0.3411764706, green: 0.6666666667, blue: 0.9254901961),
-                 Color(red: 0.262745098, green: 0.7333333333, blue: 0.9137254902)
-             ]),
-             center: .center,
-             startAngle: .degrees(rotationAngle),
-             endAngle: .degrees(rotationAngle + 360)
-         )
-     }*/
     private var backgroundGradient: AngularGradient {
         AngularGradient(
             gradient: Gradient(colors: [
diff --git a/FreeAPS/Sources/Modules/Home/View/HomeRootView.swift b/FreeAPS/Sources/Modules/Home/View/HomeRootView.swift
index 082151a4a..66c0b71ef 100644
--- a/FreeAPS/Sources/Modules/Home/View/HomeRootView.swift
+++ b/FreeAPS/Sources/Modules/Home/View/HomeRootView.swift
@@ -185,40 +185,40 @@ extension Home {
             return scene
         }
 
-        private var sageView: some View {
-            ZStack {
-                if let date = state.recentGlucose?.sessionStartDate {
-                    let expiration = (state.cgm == .xdrip || state.cgm == .glucoseDirect) ? state.sensorDays * 8.64E4 : state.cgm
-                        .expiration
-                    let remainingTime: TimeInterval = expiration - (-1 * date.timeIntervalSinceNow)
-
-                    Sage(amount: remainingTime, expiration: expiration).frame(width: 70, height: 26)
-
-                    HStack {
-                        Image(systemName: "clock")
-                            .font(.system(size: 12))
-                            .foregroundStyle(.white)
-
-                        Text(
-                            remainingTime >= 2 * 8.64E4 ?
-                                (remainingTimeFormatterDays.string(from: remainingTime) ?? "")
-                                .replacingOccurrences(of: ",", with: " ") :
-                                (remainingTimeFormatter.string(from: remainingTime) ?? "")
-                                .replacingOccurrences(of: ",", with: " ")
-                        )
-                        .font(.system(size: 16))
-                        .foregroundColor(.white)
-                    }
-                    .background(TimeEllipse(characters: 10))
-                } /* else {
-                     EmptyView() // Stellt sicher, dass immer ein View existiert
-                 } */
-            }
-            .font(.timeSettingFont)
-            .dynamicTypeSize(DynamicTypeSize.medium ... DynamicTypeSize.large)
-            .frame(maxHeight: .infinity, alignment: .center)
-            .offset(x: -8, y: 3)
-        }
+        /*    private var sageView: some View {
+             ZStack {
+                 if let date = state.recentGlucose?.sessionStartDate {
+                     let expiration = (state.cgm == .xdrip || state.cgm == .glucoseDirect) ? state.sensorDays * 8.64E4 : state.cgm
+                         .expiration
+                     let remainingTime: TimeInterval = expiration - (-1 * date.timeIntervalSinceNow)
+
+                     Sage(amount: remainingTime, expiration: expiration).frame(width: 70, height: 26)
+
+                     HStack {
+                         Image(systemName: "clock")
+                             .font(.system(size: 12))
+                             .foregroundStyle(.white)
+
+                         Text(
+                             remainingTime >= 2 * 8.64E4 ?
+                                 (remainingTimeFormatterDays.string(from: remainingTime) ?? "")
+                                 .replacingOccurrences(of: ",", with: " ") :
+                                 (remainingTimeFormatter.string(from: remainingTime) ?? "")
+                                 .replacingOccurrences(of: ",", with: " ")
+                         )
+                         .font(.system(size: 16))
+                         .foregroundColor(.white)
+                     }
+                     .background(TimeEllipse(characters: 10))
+                 } /* else {
+                      EmptyView() // Stellt sicher, dass immer ein View existiert
+                  } */
+             }
+             .font(.timeSettingFont)
+             .dynamicTypeSize(DynamicTypeSize.medium ... DynamicTypeSize.large)
+             .frame(maxHeight: .infinity, alignment: .center)
+             .offset(x: -8, y: 3)
+         }*/
 
         var glucoseView: some View {
             let doubleBolusProgress = Binding<Double?> {
@@ -261,7 +261,7 @@ extension Home {
                         .frame(width: 110, height: 110)
                 } else {
                     Circle()
-                        .fill(angularGradient)
+                        .fill(Color.darkGray.opacity(0.5))
                         .frame(width: 110, height: 110)
                         .overlay(
                             Circle()
@@ -404,7 +404,7 @@ extension Home {
                                 .frame(width: 60, height: 60)
                         } else {
                             Circle()
-                                .fill(angularGradient)
+                                .fill(Color.darkGray.opacity(0.5))
                                 .frame(width: 60, height: 60)
                                 .overlay(
                                     Circle()
@@ -484,7 +484,7 @@ extension Home {
                                 .frame(width: 40, height: 40)
                         } else {
                             Circle()
-                                .fill(angularGradient)
+                                .fill(Color.darkGray.opacity(0.5))
                                 .frame(width: 40, height: 40)
                                 .overlay(
                                     Circle()
@@ -522,6 +522,85 @@ extension Home {
             }
         }
 
+        struct SmallerFillablePieSegment: View {
+            @ObservedObject var pieSegmentViewModel: PieSegmentViewModel
+
+            var fillFraction: CGFloat
+            var color: Color
+            var backgroundColor: Color
+            var displayText: String
+            var animateProgress: Bool
+            var button3D: Bool // Umschalter für den 3D-Effekt
+
+            let angularGradient = AngularGradient(
+                gradient: Gradient(colors: [
+                    Color.gray.opacity(0.3)
+                ]),
+                center: .center,
+                startAngle: .degrees(0),
+                endAngle: .degrees(360)
+            )
+
+            var body: some View {
+                HStack(alignment: .center, spacing: 10) { // Abstand zwischen Kreis und Text
+                    ZStack {
+                        if button3D {
+                            Circle()
+                                .fill(Color.darkGray.opacity(0.5))
+                                .frame(width: 40, height: 40)
+                                .shadow(color: Color.black.opacity(0.4), radius: 5, x: 3, y: 3)
+
+                            Circle()
+                                .stroke(
+                                    LinearGradient(
+                                        gradient: Gradient(colors: [
+                                            Color.white.opacity(0.9),
+                                            Color.white.opacity(0.4),
+                                            Color.clear,
+                                            Color.black.opacity(0.3),
+                                            Color.black.opacity(0.6)
+                                        ]),
+                                        startPoint: .topLeading,
+                                        endPoint: .bottomTrailing
+                                    ),
+                                    lineWidth: 2
+                                )
+                                .frame(width: 40, height: 40)
+                        } else {
+                            Circle()
+                                .fill(Color.darkGray.opacity(0.5))
+                                .frame(width: 40, height: 40)
+                                .overlay(
+                                    Circle()
+                                        .stroke(Color.white, lineWidth: 0)
+                                )
+                        }
+
+                        PieSliceView(
+                            startAngle: .degrees(-90),
+                            endAngle: .degrees(-90 + Double(pieSegmentViewModel.progress * 360))
+                        )
+                        .fill(color)
+                        .frame(width: 40, height: 40)
+                        .opacity(0.6)
+                    }
+                    .frame(width: 40, height: 40) // Zwingt den ZStack auf die Kreisgröße
+
+                    // Text rechts vom Kreis
+                    Text(displayText)
+                        .font(.system(size: 16))
+                        .foregroundColor(.white)
+                        .frame(maxWidth: .infinity, alignment: .leading) // Linksbündig ausrichten
+                }
+                .onAppear {
+                    pieSegmentViewModel.updateProgress(to: fillFraction, animate: animateProgress)
+                }
+                .onChange(of: fillFraction) { _, newValue in
+                    pieSegmentViewModel.updateProgress(to: newValue, animate: true)
+                }
+            }
+        }
+
         struct BigFillablePieSegment: View {
             @ObservedObject var pieSegmentViewModel: PieSegmentViewModel
 
@@ -624,7 +703,14 @@ extension Home {
             }
         }
 
-        // Header Anfang
+        private var stackedLeftTopView: some View {
+            VStack(spacing: 25) {
+                carbsSmallView
+                insulinSmallView
+            }
+        }
+
+        // headerView Anfang
         // Temp Basal Anfang
         private var tempRateView: some View {
             ZStack {
@@ -663,11 +749,12 @@ extension Home {
                     .background(TimeEllipseBig(characters: 10))
                 }
             }
-            .offset(x: 20, y: 0)
         }
 
         // Temp Basal Ende
+
         // GlucoseWheel Anfang
+
         struct BigFillablePieSegment2: View {
             @ObservedObject var pieSegmentViewModel: PieSegmentViewModel
 
@@ -681,7 +768,7 @@ extension Home {
             var body: some View {
                 ZStack {
                     Circle()
-                        .fill(Color.blue.opacity(1.0))
+                        .fill(Color.darkGray.opacity(0.6))
                         .frame(width: 110, height: 110)
                         .overlay(
                             Circle()
@@ -731,7 +818,6 @@ extension Home {
                             displayText: displayText,
                             animateProgress: true
                         )
-                        .frame(width: 110, height: 110)
 
                         // X-Button Overlay
                         Circle()
@@ -758,10 +844,6 @@ extension Home {
             ZStack {
                 VStack {
                     HStack {
-                        /* Image(systemName: "timer")
-                         .font(.system(size: 14))
-                         .foregroundStyle(.teal)*/
-
                         if let eventualBG = state.eventualBG {
                             HStack(spacing: 4) {
                                 Text("⇢")
@@ -817,14 +899,9 @@ extension Home {
                 case .view1:
                     loopView
                         .frame(maxHeight: .infinity)
-                        .offset(y: 25)
-                        .padding(.bottom, 10)
-
                 case .view2:
                     loopView2
                         .frame(maxHeight: .infinity)
-                        .offset(y: 25)
-                        .padding(.bottom, 10)
                 }
             } else {
                 // Fallback-Ansicht, falls der String-Wert ungültig ist
@@ -833,30 +910,86 @@ extension Home {
             }
         }
 
-        /* private var sensorAgeDays: some View {
-             ZStack {
-                 HStack {
-                     Image(systemName: "sensor.tag.radiowaves.forward.fill").font(.system(size: 17)).foregroundStyle(.white)
-                     if state.displayExpiration {
-                         Text("\(state.remainingSensorDays) Days")
-                             .font(.timeSettingFont)
-                             .foregroundColor(.white)
-                     }
-                 }
-                 .background(TimeEllipseBig(characters: 10))
-             }
-             .dynamicTypeSize(DynamicTypeSize.medium ... DynamicTypeSize.large)
-             .frame(maxHeight: .infinity, alignment: .center)
-             .onAppear {
-                 state.settingsDidChange(state.settingsManager.settings)
-                 state.sensorAgeDays = state.settingsManager.settings.sensorAgeDays
+        // gerade Kante aber ungenaue Restzeit Darstellung
+        /*   struct TimeEllipseSensorAge: View {
+             var remainingDays: Int
+             var totalDays: Int
+             let characters: Int = 10 // Fixe Basisbreite für den Hintergrund
+
+             var body: some View {
+                 let progress = CGFloat(remainingDays) / CGFloat(totalDays)
+                 // let progress = CGFloat(totalDays) - CGFloat(remainingDays)
+
+                 let maxWidth = CGFloat(characters * 10)
+
+                 ZStack(alignment: .leading) {
+                     // Hintergrund bleibt konstant
+                     RoundedRectangle(cornerRadius: 15)
+                         .fill(Color.gray.opacity(0.2))
+                         .frame(width: maxWidth, height: 24)
+
+                     // Farbverlauf für die verbleibenden Tage
+                     RoundedRectangle(cornerRadius: 15)
+                         .fill(
+                             LinearGradient(
+                                 gradient: Gradient(stops: [
+                                     Gradient.Stop(
+                                         color: remainingDays == 1 ? .red : (remainingDays == 2 ? .orange : .white.opacity(0.1)),
+                                         location: progress
+                                     ),
+                                     Gradient.Stop(color: Color.clear, location: progress)
+                                 ]),
+                                 startPoint: .leading,
+                                 endPoint: .trailing
+                             )
+                         )
+                         .frame(width: maxWidth * progress, height: 24) }
+                     .clipShape(RoundedRectangle(cornerRadius: 15)) // Verhindert Überlauf
              }
          }*/
 
+        // Farbverlauf mit blur effekt
+        struct TimeEllipseSensorAge: View {
+            var remainingDays: Int
+            var totalDays: Int
+            let characters: Int = 10 // Fixe Basisbreite für den Hintergrund
+
+            var body: some View {
+                let safeTotalDays = max(1, totalDays) // Verhindert Division durch 0
+                let safeRemainingDays = min(max(0, remainingDays), safeTotalDays) // Begrenzung auf gültigen Bereich
+
+                let progress = CGFloat(safeRemainingDays) / CGFloat(safeTotalDays)
+                let maxWidth = CGFloat(characters * 10)
+
+                ZStack(alignment: .leading) {
+                    // Hintergrund bleibt konstant
+                    RoundedRectangle(cornerRadius: 15)
+                        .fill(Color.darkGray.opacity(0.5))
+                        .frame(width: maxWidth, height: 24)
+
+                    // Farbverlauf für die verbleibenden Tage
+                    RoundedRectangle(cornerRadius: 15)
+                        .fill(
+                            LinearGradient(
+                                gradient: Gradient(colors: [
+                                    safeRemainingDays == 1 ? .red : (safeRemainingDays == 2 ? .orange : .green.opacity(1.0)),
+                                    Color.clear
+                                ]),
+                                startPoint: .leading,
+                                endPoint: .trailing
+                            )
+                        )
+                        // .frame(width: maxWidth * progress, height: 24)
+                        .frame(width: maxWidth * CGFloat(remainingDays) / CGFloat(totalDays), height: 24)
+                }
+                .clipShape(RoundedRectangle(cornerRadius: 15)) // Verhindert Überlauf
+            }
+        }
+
         private var sensorAgeDays: some View {
             ZStack {
                 HStack {
-                    Image(systemName: "sensor.tag.radiowaves.forward.fill")
+                    Image(systemName: "sensor.tag.radiowaves.forward")
                         .font(.system(size: 17))
                         .foregroundStyle(.white)
                     if state.displayExpiration {
@@ -868,7 +1001,10 @@ extension Home {
                 .background(
                     TimeEllipseSensorAge(
                         remainingDays: state.remainingSensorDays,
-                        totalDays: SensorAgeDays(rawValue: state.sensorAgeDays)?.asInt() ?? 14
+                        totalDays: SensorAgeDays(
+                            rawValue:
+                            state.sensorAgeDays
+                        )?.asInt() ?? 10
                     )
                 )
             }
@@ -881,18 +1017,6 @@ extension Home {
         }
 
         @ViewBuilder private func headerView(_ geo: GeometryProxy) -> some View {
-            /* LinearGradient(
-                 gradient: Gradient(colors: [
-                     .black.opacity(0.7),
-                     .black.opacity(0.5),
-                     .black.opacity(0.3),
-                     .clear,
-                     .clear,
-                     .clear
-                 ]),
-                 startPoint: .top,
-                 endPoint: .bottom
-             )*/
             LinearGradient(
                 gradient: Gradient(colors: [
                     .clear,
@@ -903,7 +1027,7 @@ extension Home {
                 endPoint: .bottom
             )
             .frame(
-                maxHeight: fontSize < .extraExtraLarge ? 115 + geo.safeAreaInsets.top : 0 + geo.safeAreaInsets.top
+                maxHeight: fontSize < .extraExtraLarge ? 120 + geo.safeAreaInsets.top : 0 + geo.safeAreaInsets.top
             )
             .padding(.top, geo.safeAreaInsets.top)
             .overlay {
@@ -911,80 +1035,69 @@ extension Home {
                     VStack(alignment: .leading, spacing: 8) {
                         HStack {
                             VStack(alignment: .leading, spacing: 8) {
-                                HStack(spacing: 5) {
-                                    tempRateView
-                                        .offset(y: 18)
-                                    /* Text("Verbleibende Sensor-Tage: \(state.remainingSensorDays)")*/
+                                HStack(spacing: 3) {
+                                    stackedLeftTopView
+                                        .offset(x: 20, y: 55)
                                 }
                             }
                             Spacer()
                             HStack {
-                                Spacer()
+                                // Spacer()
                                 if state.bolusProgress != nil, state.bolusAmount != nil {
                                     bolusProgressView2()
-                                        .offset(y: 18)
+                                        .offset(x: -35, y: 53)
 
                                 } else {
                                     glucoseAndLoopView()
-                                        .offset(y: 18)
+                                        .offset(x: -35, y: 53)
                                 }
                                 Spacer()
                             }
-                            if state.displayExpiration {
-                                ZStack {
-                                    // sageView
-                                    //     .offset(y: -35)
-                                    sensorAgeDays
-                                        .offset(x: -20, y: -35)
-
-                                    eventualBGView
-                                        .offset(y: 18)
-                                }
-                            } else {
-                                eventualBGView
-                                    .offset(y: 18)
-                            }
+                            loopViewSelector()
+                                .offset(x: -50, y: 53)
                         }
                     }
-                    .offset(y: state.displayExpiration ? 20 : 80)
-                    Spacer()
                 }
+                tempRateSensorAgeeventualBG
+                    .frame(maxWidth: .infinity, maxHeight: 24) // Höhe testen
+                    .offset(y: -geo.safeAreaInsets.top + 20) // Nach oben schieben
             }
-            .overlay(
-                LinearGradient(
-                    gradient: Gradient(colors: [
-                        backgroundColor.opacity(1),
-                        backgroundColor.opacity(1),
-                        Color.black.opacity(0.4),
-                        Color.black.opacity(0.3),
-                        Color.black.opacity(0.2),
-                        Color.black.opacity(0.1),
-                        Color.black.opacity(0.0)
-                    ]),
-                    startPoint: .top,
-                    endPoint: .bottom
-                )
-                .frame(height: 25)
-                .offset(y: 60),
-                alignment: .top
-            )
+            // Schatten oben
+            /* .overlay(
+                 LinearGradient(
+                     gradient: Gradient(colors: [
+                         backgroundColor.opacity(1),
+                         backgroundColor.opacity(1),
+                         Color.black.opacity(0.4),
+                         Color.black.opacity(0.3),
+                         Color.black.opacity(0.2),
+                         Color.black.opacity(0.1),
+                         Color.black.opacity(0.0)
+                     ]),
+                     startPoint: .top,
+                     endPoint: .bottom
+                 )
+                 .frame(height: 25)
+                 .offset(y: 60),
+                 alignment: .top
+             )*/
             // Schatten unten
-            .overlay(
-                LinearGradient(
-                    gradient: Gradient(colors: [
-                        Color.black.opacity(0.5),
-                        Color.black.opacity(0.4),
-                        Color.black.opacity(0.3),
-                        Color.black.opacity(0.2),
-                        Color.black.opacity(0.1),
-                        Color.black.opacity(0)
-                    ]),
-                    startPoint: .bottom,
-                    endPoint: .top
-                )
-                .frame(height: 20),
-                alignment: .bottom
-            )
+            /*  .overlay(
+                 LinearGradient(
+                     gradient: Gradient(colors: [
+                         Color.black.opacity(0.5),
+                         Color.black.opacity(0.4),
+                         Color.black.opacity(0.3),
+                         Color.black.opacity(0.2),
+                         Color.black.opacity(0.1),
+                         Color.black.opacity(0)
+                     ]),
+                     startPoint: .bottom,
+                     endPoint: .top
+                 )
+                 .frame(height: 20),
+                 alignment: .bottom
+             )*/
         }
 
         // Head Ende
@@ -1026,24 +1139,102 @@ extension Home {
             }
         }
 
+        var carbsSmallView: some View {
+            HStack {
+                if let settings = state.settingsManager {
+                    HStack(spacing: 0) {
+                        ZStack {
+                            let substance = Double(state.data.suggestion?.cob ?? 0)
+                            let maxValue = max(Double(settings.preferences.maxCOB), 1)
+                            let fraction = CGFloat(substance / maxValue)
+                            let fill = max(min(fraction, 1.0), 0.0)
+
+                            SmallerFillablePieSegment(
+                                pieSegmentViewModel: carbsPieSegmentViewModel,
+                                fillFraction: fill,
+                                color: .loopYellow,
+                                backgroundColor: .clear,
+                                displayText: "\(numberFormatter.string(from: (state.data.suggestion?.cob ?? 0) as NSNumber) ?? "0")g",
+                                animateProgress: true,
+                                button3D: state.button3D
+                            )
+                        }
+                    }
+                }
+            }
+        }
+
         // CarbView Ende
 
+        /* var loopView: some View {
+             LoopView(
+                 suggestion: $state.data.suggestion,
+                 enactedSuggestion: $state.enactedSuggestion,
+                 closedLoop: $state.closedLoop,
+                 timerDate: $state.data.timerDate,
+                 isLooping: $state.isLooping,
+                 lastLoopDate: $state.lastLoopDate,
+                 manualTempBasal: $state.manualTempBasal
+             )
+             .onTapGesture {
+                 state.isStatusPopupPresented.toggle()
+             }.onLongPressGesture {
+                 let impactHeavy = UIImpactFeedbackGenerator(style: .heavy)
+                 impactHeavy.impactOccurred()
+                 state.runLoop()
+             }
+         }*/
         var loopView: some View {
-            LoopView(
-                suggestion: $state.data.suggestion,
-                enactedSuggestion: $state.enactedSuggestion,
-                closedLoop: $state.closedLoop,
-                timerDate: $state.data.timerDate,
-                isLooping: $state.isLooping,
-                lastLoopDate: $state.lastLoopDate,
-                manualTempBasal: $state.manualTempBasal
-            )
-            .onTapGesture {
-                state.isStatusPopupPresented.toggle()
-            }.onLongPressGesture {
-                let impactHeavy = UIImpactFeedbackGenerator(style: .heavy)
-                impactHeavy.impactOccurred()
-                state.runLoop()
+            ZStack {
+                if state.button3D {
+                    Circle()
+                        .fill(Color.darkGray.opacity(0.5))
+                        .frame(width: 50, height: 50)
+                        .shadow(color: Color.black.opacity(0.4), radius: 5, x: 3, y: 3) // Schatten für Tiefe
+
+                    Circle()
+                        .stroke(
+                            LinearGradient(
+                                gradient: Gradient(colors: [
+                                    Color.white.opacity(0.9), // Lichtreflexion oben links
+                                    Color.white.opacity(0.4),
+                                    Color.clear,
+                                    Color.black.opacity(0.3), // Schatten unten rechts
+                                    Color.black.opacity(0.6)
+                                ]),
+                                startPoint: .topLeading,
+                                endPoint: .bottomTrailing
+                            ),
+                            lineWidth: 2
+                        )
+                        .frame(width: 50, height: 50)
+                } else {
+                    Circle()
+                        .fill(Color.darkGray.opacity(0.5))
+                        .frame(width: 50, height: 50)
+                        .overlay(
+                            Circle()
+                                .stroke(Color.white, lineWidth: 0)
+                        )
+                }
+
+                LoopView(
+                    suggestion: $state.data.suggestion,
+                    enactedSuggestion: $state.enactedSuggestion,
+                    closedLoop: $state.closedLoop,
+                    timerDate: $state.data.timerDate,
+                    isLooping: $state.isLooping,
+                    lastLoopDate: $state.lastLoopDate,
+                    manualTempBasal: $state.manualTempBasal
+                )
+                .onTapGesture {
+                    state.isStatusPopupPresented.toggle()
+                }
+                .onLongPressGesture {
+                    let impactHeavy = UIImpactFeedbackGenerator(style: .heavy)
+                    impactHeavy.impactOccurred()
+                    state.runLoop()
+                }
             }
         }
 
@@ -1110,6 +1301,41 @@ extension Home {
             }
         }
 
+        var insulinSmallView: some View {
+            HStack {
+                if let settings = state.settingsManager {
+                    HStack(spacing: 0) {
+                        ZStack {
+                            let substance = Double(state.data.suggestion?.iob ?? 0)
+                            let maxValue = max(Double(settings.preferences.maxIOB), 1)
+
+                            let fraction = CGFloat(abs(substance) / maxValue)
+                            let fill = min(fraction, 1.0) // Begrenzung auf max 1
+
+                            let isNegative = substance < 0
+                            let pieColor: Color = isNegative ? .red : .insulin
+                            let _: Double = isNegative ? 90 : -90
+
+                            SmallerFillablePieSegment(
+                                pieSegmentViewModel: insulinPieSegmentViewModel,
+                                fillFraction: fill,
+                                color: pieColor,
+                                backgroundColor: .clear,
+                                displayText: "\(insulinnumberFormatter.string(from: (state.data.suggestion?.iob ?? 0) as NSNumber) ?? "0")U",
+                                animateProgress: true,
+                                button3D: state.button3D
+                            )
+                        }
+                    }
+                    .onTapGesture {
+                        if state.pumpDisplayState != nil {
+                            state.setupPump = true
+                        }
+                    }
+                }
+            }
+        }
+
         // InsulinView Ende
         // TopBar Ende
 
@@ -1499,8 +1725,6 @@ extension Home {
                                 }
                             }
                         }
-                        .padding(.top, 20)
-                        .padding(.bottom, 20)
                     }
                     .onReceive(timer) { _ in
                         state.specialDanaKitFunction()
@@ -1515,6 +1739,8 @@ extension Home {
             }
         }
 
+        // DanaBar 2
+
         var infoPanel3: some View {
             if state.danaBar {
                 return AnyView(
@@ -1535,8 +1761,6 @@ extension Home {
             }
         }
 
-        // DanaBar 2
-
         var info3: some View {
             if state.danaBar {
                 return AnyView(
@@ -1805,8 +2029,6 @@ extension Home {
                                 }
                             }
                         }
-                        .padding(.top, 20)
-                        .padding(.bottom, 20)
                     }
                     .onReceive(timer) { _ in
                         state.specialDanaKitFunction()
@@ -1857,48 +2079,73 @@ extension Home {
             .modal(for: .dataTable, from: self)
         }
 
-        var chart: some View {
-            VStack(spacing: 0) {
-                if state.carbInsulinLoopViewOption {
-                    HStack {
-                        Spacer()
-                        carbsView
-                            .frame(height: 50)
-                            .padding(.top, 10)
-
-                        Spacer()
-
-                        loopViewSelector()
-                            .frame(height: 50)
-
-                        Spacer()
-
-                        insulinView
-                            .frame(height: 50)
-                            .padding(.top, 10)
+        // tempRateSensorAgeeventualBG Anfang
+        var tempRateSensorAgeeventualBG: some View {
+            ZStack {
+                info4
+            }
+            .frame(maxWidth: .infinity)
+        }
 
-                        Spacer()
+        var info4: some View {
+            Group {
+                HStack(spacing: 15) {
+                    Spacer()
+                    HStack {
+                        tempRateView
+                            .foregroundColor(.white)
+                    }
+                    .frame(maxWidth: 100, alignment: .leading)
+                    Spacer()
+                    if state.displayExpiration {
+                        HStack(spacing: 0) {
+                            sensorAgeDays
+                                .foregroundColor(.white)
+                        }
                     }
-                    .dynamicTypeSize(...DynamicTypeSize.xLarge)
-                    .padding(.horizontal, 10)
-                    .padding(.top, 10)
-                    .padding(.bottom, 30)
+                    Spacer()
+                    HStack {
+                        eventualBGView
+                            .foregroundColor(.white)
+                    }
+                    .padding(.trailing, -22)
+                    .frame(maxWidth: 100, alignment: .trailing)
+                    Spacer()
                 }
+            }
+        }
 
+        // tempRateSensorAgeeventualBG Ende
+
+        var chart: some View {
+            VStack(spacing: 0) {
                 Group {
                     if state.danaBarViewOption == "view1" {
                         info
+                            .padding(.top, 10)
                     } else {
                         info3
+                            .padding(.top, 10)
                     }
-                    mainChart.padding(.top, 15)
+
+                    /*      if state.carbInsulinLoopViewOption {
+                         HStack {
+                             tempRateSensorAgeeventualBG
+                                 .frame(height: 30)
+                         }
+                         .dynamicTypeSize(...DynamicTypeSize.xLarge)
+                         .padding(.horizontal, 10)
+                         .padding(.top, 40)
+                     }*/
+
+                    mainChart.padding(.top, 35)
                     legendPanel.padding(.top, 15)
-                    tempTargetbar.padding(.top, 20)
+                    tempTargetbar.padding(.top, 30)
                     infoPanel.padding(.top, 20).padding(.bottom, 10)
                         .frame(width: UIScreen.main.bounds.width)
                 }
             }
-            .frame(minHeight: UIScreen.main.bounds.height / 1.52) // Je größer der Wert, je kleiner der Chart
+            .frame(minHeight: UIScreen.main.bounds.height / 1.52) // Je größer der Wert, desto kleiner der Chart
         }
 
         var legendPanel: some View {
@@ -2004,40 +2251,40 @@ extension Home {
         }
 
         var info2: some View {
-            if state.timeSettings {
-                return AnyView(
+            Group {
+                if state.timeSettings {
                     HStack(spacing: 15) {
                         // Linker Stack
                         Spacer()
-
                         HStack {
                             isfView
                                 .foregroundColor(.white)
-                        }.padding(.leading, 0)
-                            .frame(maxWidth: 100, alignment: .leading)
+                        }
+                        .padding(.leading, 0)
+                        .frame(maxWidth: 100, alignment: .leading)
 
                         Spacer()
 
                         // Mittlerer Stack
-
                         HStack(spacing: 0) {
                             timeSetting
                         }
+
                         Spacer()
 
                         // Rechter Stack - TDD
-
                         HStack {
                             tddView
                                 .foregroundColor(.white)
-                        }.padding(.trailing, 25)
-                            .frame(maxWidth: 100, alignment: .trailing)
+                        }
+                        .padding(.trailing, 25)
+                        .frame(maxWidth: 100, alignment: .trailing)
 
                         Spacer()
                     }
-                )
-            } else {
-                return AnyView(EmptyView())
+                } else {
+                    EmptyView()
+                }
             }
         }
 
@@ -2231,7 +2478,7 @@ extension Home {
                             .frame(width: 50, height: 50)
                     } else {
                         Circle()
-                            .fill(Color.gray.opacity(0.3))
+                            .fill(Color.darkGray.opacity(0.5))
                             .frame(width: 50, height: 50)
                             .overlay(
                                 Circle()
diff --git a/FreeAPS/Sources/Modules/StatConfig/StatConfigStateModel.swift b/FreeAPS/Sources/Modules/StatConfig/StatConfigStateModel.swift
index ec0ef17db..230c5132f 100644
--- a/FreeAPS/Sources/Modules/StatConfig/StatConfigStateModel.swift
+++ b/FreeAPS/Sources/Modules/StatConfig/StatConfigStateModel.swift
@@ -30,12 +30,11 @@ extension StatConfig {
         @Published var legendsSwitch: Bool = false
         @Published var tempTargetBar: Bool = false
         @Published var timeSettings: Bool = false
-        @Published var backgroundColorOptionRawValue: String = BackgroundColorOption.darkBlue.rawValue
-        @Published var backgroundColorSelected: String = BackgroundColorOption.darkBlue.rawValue
+        @Published var backgroundColorOptionRawValue: String = BackgroundColorOption.navajoWhite4.rawValue
         @Published var danaBarViewOption: String = "view1"
         @Published var insulinAgeOption: String = "Drei_Tage"
         @Published var cannulaAgeOption: String = "Drei_Tage"
-        @Published var loopViewOption: String = LoopViewOption.view2.rawValue
+        @Published var loopViewOption: String = LoopViewOption.view1.rawValue
         @Published var chartBackgroundColored: Bool = false
         @Published var carbInsulinLoopViewOption: Bool = true
         @Published var barViewOptionConfigurationRawValue: String = BarViewOptionConfiguration.all.rawValue
@@ -45,7 +44,7 @@ extension StatConfig {
         @Published var ttBarActive: Bool = false
         @Published var bottomBarActive: Bool = false
         @Published var button3D: Bool = false
-        @Published var sensorAgeDays: String = "Drei_Tage"
+        @Published var sensorAgeDays: String = "Fuenfzehn_Tage"
         @Published var sensorStartTime: Date?
         // Dana UI Toggels
 
diff --git a/FreeAPS/Sources/Modules/StatConfig/View/StatConfigRootView.swift b/FreeAPS/Sources/Modules/StatConfig/View/StatConfigRootView.swift
index df5d45f54..55690fee0 100644
--- a/FreeAPS/Sources/Modules/StatConfig/View/StatConfigRootView.swift
+++ b/FreeAPS/Sources/Modules/StatConfig/View/StatConfigRootView.swift
@@ -73,7 +73,7 @@ extension StatConfig {
             VStack(spacing: 0) {
                 ZStack {
                     Image(BarViewOptionConfigurationRawValue(
-                        topBar: state.carbInsulinLoopViewOption,
+                        topBar: state.displayExpiration,
                         danaBar: state.danaBar,
                         legendBar: state.legendsSwitch,
                         ttBar: state.tempTargetBar,
@@ -102,26 +102,7 @@ extension StatConfig {
                                 header: Text("Bar Selection"),
                                 footer: Text("Select the  desired bar view")
                             ) {
-                                Toggle("Top Bar", isOn: $state.carbInsulinLoopViewOption)
-                                if state.carbInsulinLoopViewOption {
-                                    Picker("Select Loop View", selection: $state.loopViewOption) {
-                                        ForEach(LoopViewOption.allCases) { option in
-                                            HStack {
-                                                Image(option == .view1 ? "LoopView1" : "LoopView2")
-                                                    .resizable()
-                                                    .scaledToFit()
-                                                    .frame(width: 30, height: 30)
-                                                Text(option.rawValue)
-                                                    .font(.caption)
-                                            }
-                                            .tag(option)
-                                        }
-                                    }
-                                    .pickerStyle(NavigationLinkPickerStyle())
-                                }
-                                //  }
-
-                                //  Section {
+                                // Toggle("Top Bar", isOn: $state.carbInsulinLoopViewOption)
                                 Toggle("Dana Bar", isOn: $state.danaBar)
 
                                 if state.danaBar {
@@ -191,6 +172,21 @@ extension StatConfig {
                                 header: Text("Visual Options"),
                                 footer: Text("According to your taste")
                             ) {
+                                Picker("Select Loop View", selection: $state.loopViewOption) {
+                                    ForEach(LoopViewOption.allCases) { option in
+                                        HStack {
+                                            Image(option == .view1 ? "LoopView1" : "LoopView2")
+                                                .resizable()
+                                                .scaledToFit()
+                                                .frame(width: 30, height: 30)
+                                            Text(option.rawValue)
+                                                .font(.caption)
+                                        }
+                                        .tag(option)
+                                    }
+                                }
+                                .pickerStyle(NavigationLinkPickerStyle())
+
                                 if #available(iOS 18.0, *) {
                                     Picker("Background Color", selection: $state.backgroundColorOptionRawValue) {
                                         ForEach(BackgroundColorOption.allCases) { option in
@@ -213,7 +209,6 @@ extension StatConfig {
                                 Toggle("3D Look", isOn: $state.button3D)
                             }
 
-                            // Section(header: Text("Sensor Settings"))
                             Section(
                                 header: Text("Sensor Settings"),
                                 footer: Text("Long press for setting new Sensor Start Time")
diff --git a/FreeAPS/Sources/Views/ViewModifiers.swift b/FreeAPS/Sources/Views/ViewModifiers.swift
index 103bfc0fa..6da5a6894 100644
--- a/FreeAPS/Sources/Views/ViewModifiers.swift
+++ b/FreeAPS/Sources/Views/ViewModifiers.swift
@@ -269,7 +269,10 @@ struct ColouredBackground: View {
     var body: some View {
         RoundedRectangle(cornerRadius: 10)
             .fill(Color.rig22Background)
-            .shadow(color: Color.black.opacity(0.8), radius: 10, x: 5, y: 5) // Kräftigerer Schatten
+            // .fill(Color.darkGray.opacity(1.0))
+            // .shadow(color: Color.black.opacity(0.8), radius: 5, x: 5, y: 5) // Kräftigerer Schatten
+            .shadow(color: Color.black.opacity(0.3), radius: 5, x: 5, y: 5) // Hauptschatten
+            .shadow(color: Color.black.opacity(0.3), radius: 10, x: 3, y: 3) // Weichere Schattenebene
     }
 }
 
@@ -293,12 +296,22 @@ struct LoopEllipse: View {
     }
 }
 
+extension View {
+    @ViewBuilder func `if`<Content: View>(_ condition: Bool, transform: (Self) -> Content) -> some View {
+        if condition {
+            transform(self)
+        } else {
+            self
+        }
+    }
+}
+
 struct TimeEllipse: View {
     @Environment(\.colorScheme) var colorScheme
     let characters: Int
     var body: some View {
         RoundedRectangle(cornerRadius: 15)
-            .fill(Color.gray).opacity(0.2)
+            .fill(Color.darkGray.opacity(0.5))
             .frame(width: CGFloat(characters * 7), height: 25)
     }
 }
@@ -308,46 +321,46 @@ struct TimeEllipseBig: View {
     let characters: Int
     var body: some View {
         RoundedRectangle(cornerRadius: 15)
-            .fill(Color.gray).opacity(0.2)
+            .fill(Color.darkGray.opacity(0.5))
             .frame(width: CGFloat(characters * 10), height: 30)
     }
 }
 
-struct TimeEllipseSensorAge: View {
-    var remainingDays: Int
-    var totalDays: Int
-    let characters: Int = 10 // Fixe Basisbreite für den Hintergrund
+/* struct TimeEllipseSensorAge: View {
+     var remainingDays: Int
+     var totalDays: Int
+     let characters: Int = 10 // Fixe Basisbreite für den Hintergrund
 
-    var body: some View {
-        let progress = CGFloat(remainingDays) / CGFloat(totalDays)
-        let maxWidth = CGFloat(characters * 10)
+     var body: some View {
+         let progress = CGFloat(remainingDays) / CGFloat(totalDays)
+         let maxWidth = CGFloat(characters * 10)
 
-        ZStack(alignment: .leading) {
-            // Hintergrund bleibt konstant
-            RoundedRectangle(cornerRadius: 15)
-                .fill(Color.gray.opacity(0.2))
-                .frame(width: maxWidth, height: 30)
+         ZStack(alignment: .leading) {
+             // Hintergrund bleibt konstant
+             RoundedRectangle(cornerRadius: 15)
+                 .fill(Color.gray.opacity(0.2))
+                 .frame(width: maxWidth, height: 24)
 
-            // Farbverlauf für die verbleibenden Tage
-            RoundedRectangle(cornerRadius: 15)
-                .fill(
-                    LinearGradient(
-                        gradient: Gradient(stops: [
-                            Gradient.Stop(
-                                color: remainingDays == 1 ? .red : (remainingDays == 2 ? .orange : .white.opacity(0.1)),
-                                location: progress
-                            ),
-                            Gradient.Stop(color: Color.clear, location: progress)
-                        ]),
-                        startPoint: .leading,
-                        endPoint: .trailing
-                    )
-                )
-                .frame(width: maxWidth * progress, height: 30)
-        }
-        .clipShape(RoundedRectangle(cornerRadius: 15)) // Verhindert Überlauf
-    }
-}
+             // Farbverlauf für die verbleibenden Tage
+             RoundedRectangle(cornerRadius: 15)
+                 .fill(
+                     LinearGradient(
+                         gradient: Gradient(stops: [
+                             Gradient.Stop(
+                                 color: remainingDays == 1 ? .red : (remainingDays == 2 ? .orange : .white.opacity(0.1)),
+                                 location: progress
+                             ),
+                             Gradient.Stop(color: Color.clear, location: progress)
+                         ]),
+                         startPoint: .leading,
+                         endPoint: .trailing
+                     )
+                 )
+                 .frame(width: maxWidth * progress, height: 24)
+         }
+         .clipShape(RoundedRectangle(cornerRadius: 15)) // Verhindert Überlauf
+     }
+ } */
 
 // Pillenform bei der Entleerung
 /* struct TimeEllipseSensorAge: View {
